@PACKAGE_INIT@

# =============================================================================
# Configuración del Compilador C++20
# =============================================================================

set(CPP20_COMPILER_VERSION "@PROJECT_VERSION@")

# Componentes disponibles
set(CPP20_COMPILER_COMMON_FOUND ON)
set(CPP20_COMPILER_FRONTEND_FOUND ON)
set(CPP20_COMPILER_BACKEND_FOUND @CPP20_COMPILER_USE_LLVM@)
set(CPP20_COMPILER_COROUTINES_FOUND @CPP20_COMPILER_ENABLE_COROUTINES@)
set(CPP20_COMPILER_MODULES_FOUND @CPP20_COMPILER_ENABLE_MODULES@)

# Dependencias requeridas
include(CMakeFindDependencyMacro)

# LLVM si está habilitado
if(CPP20_COMPILER_BACKEND_FOUND)
    find_dependency(LLVM @LLVM_PACKAGE_VERSION@ REQUIRED CONFIG)
    find_dependency(LLD REQUIRED CONFIG)
endif()

# Incluir targets exportados
include("${CMAKE_CURRENT_LIST_DIR}/cpp20-compiler-targets.cmake")

# Alias para compatibilidad
if(TARGET cpp20-compiler-common AND NOT TARGET cpp20-compiler::common)
    add_library(cpp20-compiler::common ALIAS cpp20-compiler-common)
endif()

if(TARGET cpp20-compiler-frontend AND NOT TARGET cpp20-compiler::frontend)
    add_library(cpp20-compiler::frontend ALIAS cpp20-compiler-frontend)
endif()

if(TARGET cpp20-compiler-backend AND NOT TARGET cpp20-compiler::backend)
    add_library(cpp20-compiler::backend ALIAS cpp20-compiler-backend)
endif()

# Verificar que se encontraron todos los componentes requeridos
check_required_components(cpp20-compiler)
