# Plan de Implementación - Compilador C++20 para Windows x64

## Visión General del Proyecto

Este proyecto implementa un compilador C++20 **verdaderamente desde cero** para Windows x64, con énfasis en la corrección binaria y la interoperabilidad con el ecosistema Microsoft. La estrategia se basa en construir primero un **back-end propio** de código máquina y formato COFF/PE antes de integrar LLVM, asegurando que cada capa tenga criterios de salida medibles y verificables.

**Especificación de Referencia**: Borrador final C++20 (N4861) y documentación ABI x64 de Microsoft
**Objetivo Binario**: ABI x64 de Microsoft completo y formato PE/COFF nativo
**Arquitectura**: Front-end personalizado + Back-end híbrido (propio → LLVM)
**Enfoque**: Desarrollo por capas con dependencias deductivas estrictas

## Arquitectura por Capas (Enfoque "From Scratch" Real)

### 📋 **Principio Fundamental**
Cada capa establece invariantes binarias que la siguiente puede asumir como correctas. Sin ABI correcto no hay prólogo/epílogo válido, sin prólogo no hay desenrollado, sin desenrollado no hay EH, y así sucesivamente.

---

## 🏗️ **Capa 0: Núcleo de Ensamblado y Convenciones de Llamada**
**Estado**: 🔄 Próxima - Base binaria esencial
**Objetivo**: Establecer ABI x64 de Microsoft como contrato binario fundamental

### **Alcance de la Capa 0**
**Contrato Binario Base x86_64-pc-windows-msvc**:
- Registros de paso de argumentos (RCX, RDX, R8, R9 para primeros 4)
- Shadow space de 32 bytes para llamadas
- Preservación de no volátiles (RBX, RBP, RDI, RSI, RSP, R12-R15)
- Layout de tipos triviales y homogeneidad de agregados para retorno
- Alineaciones específicas del ABI

### **TODOs Capa 0**
- 🔄 Implementar "frame builder" que decide spill slots y preservación
- 🔄 Generador de thunks para variaciones de firma y trampolines
- 🔄 Comprobador estático de invariantes de prólogo/epílogo
- 🔄 Generador de pro-/epílogos conforme a convención x64
- 🔄 Comprobador de usos de pila (shadow space, callee-saved)

### **Criterios de Salida (Verificables)**
- ✅ **abi_calling_convention.cxx**: Valida paso de enteros, FP, agregados y retornos en x64
- ✅ **sum.exe**: Ejecutable funcional que calcula sumas con llamadas correctas
- ✅ **fibonacci.exe**: Recursión iterativa y funcional con stack frames válidos
- ✅ **memcpy.exe**: Copia de memoria manual con convenciones correctas
- ✅ **llvm-readobj/dumpbin**: Confirman prólogos/epílogos conforme al ABI

**Referencia**: [Microsoft x64 Calling Convention](https://docs.microsoft.com/en-us/cpp/build/x64-calling-convention)

---

## 🏗️ **Capa 1: Formato COFF y Relocations**
**Estado**: ✅ Completado - Formato objeto nativo funcional
**Objetivo**: Emisión nativa de .obj COFF con relocations AMD64

### **Alcance de la Capa 1**
**Estructuras COFF x64**:
- Secciones .text, .rdata, .data, .pdata, .xdata
- Nombres canónicos de secciones y tabla de símbolos
- Relocations: IMAGE_REL_AMD64_ADDR32, ADDR64, REL32, REL32_1.._5
- Tabla de importación mínima para kernel32.dll

### **TODOs Capa 1**
- 🔄 COFF writer con estructuras exactas y nombres canónicos
- 🔄 Soporte para relocations AMD64 esenciales
- 🔄 "Object dumper" propio para validar cabeceras
- 🔄 Tabla de importación estática para CRT básico
- 🔄 Verificación offline de estructuras COFF

### **Criterios de Salida (Verificables)**
- ✅ **hello.obj**: Objeto enlazable con link.exe
- ✅ **dumpbin/llvm-readobj**: Reportan estructuras conformes
- ✅ **link.exe**: Produce ejecutable válido sin errores
- ✅ **hello.exe**: Ejecutable funcional con enlazado estático mínimo

**Referencia**: [PE/COFF Specification](https://docs.microsoft.com/en-us/windows/win32/debug/pe-format)

---

## 🏗️ **Capa 2: Desenrollado y Excepciones Windows x64**
**Estado**: ⏳ Pendiente - Stack unwinding esencial
**Objetivo**: .pdata/.xdata válido para stack unwinding seguro

### **Alcance de la Capa 2**
**Modelo EH Windows x64**:
- Rangos de funciones en .pdata con UNWIND_INFO
- UNWIND_CODE exacto derivable de prólogos/epílogos
- Mapeo try/catch/throw a secuencias invoke/landing pad
- Interoperabilidad con __try/__except y CRT EH

### **TODOs Capa 2**
- 🔄 Gramática prólogo/epílogo → UNWIND_CODE automático
- 🔄 Emisor de .xdata/.pdata con validación offline
- 🔄 Mapeo try/catch/throw a IR interno con landing pads
- 🔄 Pruebas cruzadas con __try/__except del CRT
- 🔄 Verificación RaiseException/RtlVirtualUnwind

### **Criterios de Salida (Verificables)**
- ✅ **seh_unwind.cxx**: Lanzamientos/capturas cruzando funciones
- ✅ **RaiseException**: Pasa sin corrupciones de stack
- ✅ **RtlVirtualUnwind**: Desenrollado correcto verificado
- ✅ **catch C++**: Interoperable con runtime MSVC

**Referencia**: [Exception Handling x64](https://docs.microsoft.com/en-us/cpp/build/exception-handling-x64)

---

## 🏗️ **Capa 3: Mangling MSVC y Layout de Clases**
**Estado**: ⏳ Pendiente - Interoperabilidad binaria
**Objetivo**: Nombres decorados y vtables compatibles con MSVC

### **Alcance de la Capa 3**
**Mangling MSVC Completo**:
- Funciones libres, miembros, estáticos, plantillas, overloads
- Referencias/punteros a miembros, qualifiers, convenciones
- Vtables/RTTI con layout compatible MSVC
- Type_info structures y virtual dispatch

### **TODOs Capa 3**
- 🔄 Decorado completo compatible con undname.exe
- 🔄 Generador de vtables y type_info para MSVC
- 🔄 Verificador que compara con esquema Microsoft
- 🔄 Pruebas de enlace con funciones MSVC
- 🔄 Virtual dispatch interoperable

### **Criterios de Salida (Verificables)**
- ✅ **mangling_crosslink.cpp**: Objetos nuestros + MSVC linkan
- ✅ **undname.exe**: Confirma decorados idénticos
- ✅ **Virtual dispatch**: Funciona entre módulos mixtos
- ✅ **RTTI**: Compatible con dynamic_cast del CRT

**Referencia**: [MSVC Name Decoration](https://docs.microsoft.com/en-us/cpp/build/decorated-names)

---

## 🏗️ **Capa 4: Front-end Mínimo**
**Estado**: ⏳ Pendiente - Análisis léxico/sintáctico
**Objetivo**: Parser completo con preprocesador y semántica básica

### **Alcance de la Capa 4**
**Front-end C++20 Básico**:
- Ocho fases de traducción con UCN y concatenación
- Expander de macros con control de re-expansión
- Parser recursivo descendente con tentative parsing
- Sistema de símbolos y lookups por ámbito
- Conversiones implícitas y categorías de valor

### **TODOs Capa 4**
- 🔄 Fases de traducción completas con UCNs
- 🔄 Expander de macros con prevención de re-expansión
- 🔄 Parser con oráculo semántico para ambigüedades
- 🔄 Sistema de tipos con cualificaciones y referencias
- 🔄 Two-phase lookup y ADL básico

### **Criterios de Salida (Verificables)**
- ✅ Programas C++ sin templates complejos compilan
- ✅ Includes y macros no triviales funcionan
- ✅ Código binario válido generado
- ✅ Diagnósticos con ubicación precisa

**Referencia**: [C++20 N4861](https://eel.is/c++draft/)

---

## 🏗️ **Capa 5: Plantillas y Conceptos**
**Estado**: ⏳ Pendiente - Metaprogramming
**Objetivo**: Constraint solver con SFINAE y resolución de sobrecarga

### **Alcance de la Capa 5**
**Sistema de Templates Completo**:
- Deducción de argumentos con SFINAE
- Resolución de sobrecarga con conversiones implícitas
- Ordenación parcial y especializaciones
- Constraint solver sobre AST de constraints

### **TODOs Capa 5**
- 🔄 Motor de sustitución con contexto de instanciación
- 🔄 Constraint solver con normalización y subsunción
- 🔄 Cacheo por AST y firma de instanciación
- 🔄 Diagnósticos diferenciados SFINAE vs errores duros

### **Criterios de Salida (Verificables)**
- ✅ Librerías con std::enable_if equivalentes funcionan
- ✅ Sobrecargas ambiguas resuelven correctamente
- ✅ requires expressions diagnostican apropiadamente

**Referencia**: [C++20 Templates](https://eel.is/c++draft/temp)

---

## 🏗️ **Capa 6: Constexpr y Evaluación**
**Estado**: ⏳ Pendiente - Compile-time execution
**Objetivo**: VM determinista con memoria abstracta

### **Alcance de la Capa 6**
**Evaluador Constexpr Completo**:
- VM con layout trivial y aliasing definido
- Reglas de constant evaluation estrictas
- Cacheo inteligente de resultados
- Traza de evaluación para debugging

### **TODOs Capa 6**
- 🔄 VM constexpr con operaciones permitidas
- 🔄 Memoria abstracta y límites de recursión
- 🔄 Integración con solver de plantillas
- 🔄 Diagnósticos con traza completa

### **Criterios de Salida (Verificables)**
- ✅ Suites comparan valores con compilador de referencia
- ✅ Uso no permitido rechazado correctamente
- ✅ Evaluación determinista y reproducible

**Referencia**: [C++20 Constant Evaluation](https://eel.is/c++draft/expr.const)

---

## 🏗️ **Capa 7: Módulos C++20**
**Estado**: ⏳ Pendiente - Modularización
**Objetivo**: BMI propietario con dependencias y cache

### **Alcance de la Capa 7**
**Sistema de Módulos**:
- Formato BMI compacto con hash de opciones
- Scanner de dependencias y grafo acíclico
- Cache con invalidación por contenido/flags
- Header units e import <header>

### **TODOs Capa 7**
- 🔄 Scanner de dependencias export/import
- 🔄 Serializador/deserializador BMI
- 🔄 Driver con compilación topológica
- 🔄 Coherencia preprocesado/módulos

### **Criterios de Salida (Verificables)**
- ✅ **modules_math.{ixx,cpp,main.cpp}**: Compila incremental
- ✅ Evita recompilaciones innecesarias
- ✅ Consistencia entre TUs

**Referencia**: [C++20 Modules](https://eel.is/c++draft/module)

---

## 🏗️ **Capa 8: Corroutinas C++20**
**Estado**: ⏳ Pendiente - Asynchronous programming
**Objetivo**: Máquina de estados propia con frame layout

### **Alcance de la Capa 8**
**Sistema de Corroutinas**:
- Frame explícito con punteros de continuación
- Destrucción segura y layout ABI-compliant
- Interacción con EH para unwinding correcto
- Microbenchmarks vs lowering estilo LLVM

### **TODOs Capa 8**
- 🔄 Verificación estática de promesa y awaitables
- 🔄 Layout de frame con continuaciones
- 🔄 Interacción con stack unwinding
- 🔄 Generación de puntos de suspensión/reanudación

### **Criterios de Salida (Verificables)**
- ✅ **coro_pingpong.cpp**: Corroutines alternan correctamente
- ✅ Suspenden/reanudan sin leaks de memoria
- ✅ Limpieza apropiada al finalizar

**Referencia**: [C++20 Coroutines](https://eel.is/c++draft/coroutine)

---

## 🔧 **Infraestructura Transversal**

### **Enlazado Híbrido (Fases 1→2)**
- **Fase 1**: link.exe como oráculo para validar .obj COFF
- **Fase 2**: Mini-linker COFF→PE propio
- **Criterio**: Ejecutables que pasan smoke tests

### **Driver CLI Profesional**
- CLI compatible: -c, -E, -S, --emit-bmi, -I, -L, -l
- Detección automática de entorno Windows SDK/CRT
- Sandbox por unidad de compilación

### **Interoperabilidad CRT/SDK**
- __declspec(dllimport/dllexport) y .drectve
- Pruebas con printf, new/delete, std::exception
- Compatibilidad binaria reproducible

### **Diagnósticos y Performance**
- Mapa de ubicaciones con correspondencia preprocesado→fuente
- -ftime-report propio con mediciones detalladas
- Caches deterministas para plantillas/constexpr

## 📊 **Métricas de Éxito por Capa**

### **Capa 0 (ABI)**: ✅ Ejecutables básicos funcionales
### **Capa 1 (COFF)**: ✅ **COMPLETADO** - .obj enlazables con link.exe
### **Capa 2 (EH)**: ⏳ Stack unwinding interoperable
### **Capa 3 (Mangling)**: ⏳ Enlace transparente con MSVC
### **Capa 4 (Front-end)**: ⏳ C++ básico compila correctamente
### **Capa 5 (Templates)**: ⏳ Metaprogramming interoperable
### **Capa 6 (Constexpr)**: ⏳ Evaluación determinista
### **Capa 7 (Modules)**: ⏳ Compilación incremental
### **Capa 8 (Coroutines)**: ⏳ Async programming funcional

## ⚡ **Timeline Realista**

- **Capas 0-1**: 8-10 semanas (Base binaria)
- **Capas 2-3**: 6-8 semanas (Interoperabilidad)
- **Capa 4**: 4-6 semanas (Front-end)
- **Capas 5-6**: 6-8 semanas (Templates/Constexpr)
- **Capas 7-8**: 4-6 semanas (Modules/Corrutinas)
- **Testing/Polish**: 4-6 semanas
- **Total**: 32-44 semanas de desarrollo full-time

## 🎯 **Ventajas de Este Enfoque**

### **Verificabilidad**
Cada capa tiene criterios de salida objetivos y medibles en Windows x64

### **Interoperabilidad Garantizada**
Compatibilidad binaria con MSVC desde la primera línea de código máquina

### **Robustez**
Sin dependencia de LLVM para features críticas; back-end híbrido (propio→LLVM)

### **Escalabilidad**
Dependencias deductivas claras permiten desarrollo incremental seguro

---

**Este plan garantiza un compilador C++20 verdaderamente desde cero, con corrección binaria verificable en cada paso.**

*Última actualización: $(date)*
*Estado del proyecto: Capa 0 ✅ Completada, Capa 1 ✅ Completada, Capa 2 ⏳ Próxima*
*Enfoque: Desarrollo por capas con criterios de salida medibles*